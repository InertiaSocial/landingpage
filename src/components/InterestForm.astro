---
import { Icon } from "astro-icon/components";
const { showSeedInvestorForm } = Astro.props;
---

<div class="thanksWrapper">
  <div class="textBlock hidden" id="thankYou">
    <span>
      <b
        ><Icon name="ph:confetti-bold" style="transform: translateY(2px)" /> Thanks
        for your interest!</b
      > We'll be in touch soon.
    </span>
  </div>
</div>
<form id="emailForm" data-astro-reload>
  <div class="inputs">
    <input
      required
      class="input"
      id="emailInput"
      type="email"
      name="entry.1223453695"
      placeholder="Enter your email"
    />

    {
      showSeedInvestorForm && (
        <div class="checkwrapper">
          <input
            class="check"
            id="checkboxInput"
            type="checkbox"
            name="entry.1201544823"
            value="Investor"
          />
          <label for="checkboxInput">
            <span class="checkbox"> </span>
          </label>
          <div class="checklabel">
            <span>Interested in participating in our seed round?</span>
          </div>
        </div>
      )
    }
  </div>
</form>
<div class="buttonHolder">
  <button type="submit" role="button" id="submitButton" class="button">
    <label for="emailInput">
      <span
        ><Icon
          name="ph:envelope-open-bold"
          style="transform: translateY(1px);"
        /> Join our waitlist</span
      >
    </label>
  </button>
</div>

<script>
import party from "party-js";

function loadForm() {
  const emailForm = document.getElementById("emailForm") as HTMLFormElement;
  const submitButton = document.getElementById(
    "submitButton",
  ) as HTMLButtonElement;
  const hiddenText = document.getElementById("thankYou") as HTMLElement;
  const logo = document.querySelector(".logo") as HTMLElement;
  const tagline = document.getElementById("tagline");
  const buttonHolder = document.querySelector(".buttonHolder") as HTMLElement;
  const emailInput = document.getElementById(
    "emailInput",
  ) as HTMLInputElement;
  const checkbox = document.getElementById(
    "checkboxInput",
  ) as HTMLInputElement;
  const thanksWrapper = document.querySelector(
    ".thanksWrapper",
  ) as HTMLElement;

  checkbox.addEventListener("change", (e) => {
    if (e.target?.checked) {
      submitButton.innerHTML = submitButton.innerHTML.replace(
        "Join our waitlist",
        "Join our investoors",
      );
    } else {
      submitButton.innerHTML = submitButton.innerHTML.replace(
        "Join our investoors",
        "Join our waitlist",
      );
    }
  });

  if ("ontouchstart" in window || navigator.maxTouchPoints > 0) {
    emailInput.addEventListener("focus", () => {
      if (tagline) {
        tagline.style.marginTop = "0.5rem";
      }
      buttonHolder.style.marginTop = "1rem";
      logo.style.marginTop = "1rem";
    });
    emailInput.addEventListener("blur", () => {
      if (tagline) {
        tagline.style.marginTop = "2rem";
      }
      buttonHolder.style.marginTop = "2rem";
      logo.style.marginTop = "10rem";
    });
  }

  submitButton.addEventListener("click", () => {
    const formData = new FormData(emailForm);
    const submittedEmail = formData.get("entry.1223453695")
    if (!submittedEmail || submittedEmail.toString().length < 4) {
      return; 
    }

    fetch(
      "https://docs.google.com/forms/u/0/d/e/1FAIpQLSebh92iCY-GZ28-UiC1iNaXJnMrvjbyXknmF_gkV1MTSqCW0A/formResponse",
      {
        method: "POST",
        body: formData,
        mode: "no-cors",
      },
    )
      .then((response) => {
        emailForm.style.opacity = "0";
        hiddenText.classList.add("show");
        party.confetti(submitButton, {
          count: party.variation.range(20, 40),
        });
        setTimeout(() => {
          emailForm.style.display = "none";
          submitButton.style.display = "none";
          thanksWrapper.style.marginTop = "-10rem";
        }, 10);
      })
      .catch((error) => {
        console.error("Error submitting form", error);
      });
  });
}

document.addEventListener("astro:page-load", loadForm);
</script>

<style lang="stylus">
.inputs
    display flex
    flex-direction column
    align-items center
    margin-top 2rem

.check
  display none
  &:checked + label .checkbox
    &:after
      transform: translate(-50%, -50%) scale(1)
    
.thanksWrapper
  display flex
  justify-content center
  align-items center
  width 100%

.checkwrapper
  text-align left
  display flex
  flex-direction row
  align-items center
  margin-bottom 2rem

  .checklabel
    width 250px
    font-weight 600
    font-size 1.2rem
    color #f8f6f2
    margin-left 1rem
    margin-bottom 0.5rem

.checkbox
  border: 4px solid #538D5B
  border-radius: 12px
  width: 50px
  height: 50px
  display: inline-block
  position: relative
  transition all 0.3s ease-in-out
  &:hover
    transform scale(1.1);

  &:after
    content: '';
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 50px;
    height: 50px;
    background linear-gradient(75deg, #50808e 0%, #a3c9a8 100%);
    border-radius: 8px;
    transition: 0.3s;
  
</style>
